<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:metrics="http://www.ryantenney.com/schema/metrics"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
      http://www.springframework.org/schema/beans/spring-beans-3.1.xsd                    
      http://www.springframework.org/schema/context                     
      http://www.springframework.org/schema/context/spring-context-3.1.xsd   
      http://www.springframework.org/schema/aop   
      http://www.springframework.org/schema/aop/spring-aop-3.1.xsd       
      http://www.springframework.org/schema/mvc                  
      http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
      http://www.springframework.org/schema/cache  
      http://www.springframework.org/schema/cache/spring-cache-3.1.xsd
      http://www.ryantenney.com/schema/metrics
      http://www.ryantenney.com/schema/metrics/metrics-3.0.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />

	
	<context:component-scan base-package="com.vcredit.lee" />
	
	<!-- Creates a MetricRegistry bean -->
    <metrics:metric-registry id="metricRegistry" />

    <!-- Creates a HealthCheckRegistry bean (Optional) -->
    <metrics:health-check-registry id="health" />

    <!-- Registers BeanPostProcessors with Spring which proxy beans and capture metrics -->
    <!-- Include this once per context (once in the parent context and in any subcontexts) -->
    <metrics:annotation-driven metric-registry="metricRegistry" />

    <!-- Example reporter definiton. Supported reporters include jmx, slf4j, graphite, and others. -->
    <!-- Reporters should be defined only once, preferably in the parent context -->
    <metrics:reporter type="console" metric-registry="metricRegistry" period="10s" />
    

    <!-- Register metric beans (Optional) -->
    <!-- The metrics in this example require metrics-jvm -->
    <metrics:register metric-registry="metricRegistry">
        <bean metrics:name="jvm.gc" class="com.codahale.metrics.jvm.GarbageCollectorMetricSet" />
        <bean metrics:name="jvm.memory" class="com.codahale.metrics.jvm.MemoryUsageGaugeSet" />
        <bean metrics:name="jvm.thread-states" class="com.codahale.metrics.jvm.ThreadStatesGaugeSet" />
        <bean metrics:name="jvm.fd.usage" class="com.codahale.metrics.jvm.FileDescriptorRatioGauge" />
    </metrics:register>
    <!-- <bean id="meterAdvice" class="com.vcredit.lee.interceptor.MeterAdvice" />
	<aop:config proxy-target-class="true">
		<aop:pointcut id="meterInsertPointCut"
			expression="@annotation(com.vcredit.lee.innotation.MyMeter)" />
		<aop:advisor advice-ref="meterAdvice" pointcut-ref="meterInsertPointCut" />
		<aop:pointcut id="meterInsertPointCut"
			expression="@annotation(com.vcredit.lee.innotation.MyMeter)" />
		<aop:advisor advice-ref="meterAdvice" pointcut-ref="meterInsertPointCut" />
	</aop:config> -->
	
	<!-- spring aop五种通知及通知中传递参数 start -->
<!-- 	<bean id="serviceAop" class="com.vcredit.lee.aop.MyXmlServiceAop"></bean>
    <aop:config>
        <aop:aspect ref="serviceAop">
            <aop:pointcut expression="execution(* com.vcredit.lee.aop.MyXmlService.handlerXml(..)) and args(name,age)" id="handlerXml"/> 带参 切点
            <aop:pointcut expression="execution(* com.vcredit.lee.aop.MyXmlService.handlerXml(..))" id="handlerXml2"/> 不带参 切点
            <aop:before method="beforeHandler" pointcut-ref="handlerXml" arg-names="name,age" /> 前置通知，传递参数
            <aop:around method="aroundHandler" pointcut-ref="handlerXml2"/> 环绕通知
            <aop:after method="afterHandler" pointcut-ref="handlerXml2"/> 后置通知 
            <aop:after-returning method="returnHandler" pointcut-ref="handlerXml2" returning="name"/> 返回通知
            <aop:after-throwing method="throwExceptionHandler" throwing="ex" pointcut-ref="handlerXml2"/> 异常通知
        </aop:aspect>
    </aop:config>
    <bean id="myXmlService" class="com.vcredit.lee.aop.MyXmlServiceImpl"></bean> -->
	<!-- spring aop五种通知及通知中传递参数 end -->

	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<mvc:exclude-mapping path="/cust/login" />
			<bean id="performanceInterceptor" class="com.vcredit.lee.interceptor.PerformanceInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>
</beans>
